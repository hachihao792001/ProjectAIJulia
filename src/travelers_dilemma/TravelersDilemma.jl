include("./SimpleGamePolicy.jl")

struct Travelers end

function SimpleGame(simpleGame::Travelers)
      # t·∫°o 1 SimpleGame c√≥ discount factor l√† 0.9 (x√°c su·∫•t ƒë·ªÉ v√≤ng l·∫∑p ch·∫°y ti·∫øp)
      # agent l√† 1, 2
      # joint action space l√† 1 list g·ªìm 2 m·∫£ng [2:100] (t·∫•t c·∫£ m·ªçi action m√† 2 agent c√≥ th·ªÉ th·ª±c hi·ªán)
      # joint reward function l√† 1 lamda expression tr·∫£ v·ªÅ k·∫øt qu·∫£ c·ªßa h√†m joint_reward
      return SimpleGame(
            0.9,
            vec(collect(1:n_agents(simpleGame))),
            [ordered_actions(simpleGame, i) for i in 1:n_agents(simpleGame)],
            (a) -> joint_reward(simpleGame, a)
      )
end

# khai b√°o s·ªë agent trong b√†i to√°n
n_agents(simpleGame::Travelers) = 2
# khai b√°o c√°c action m√† agent c√≥ th·ªÉ th·ª±c hi·ªán
ordered_actions(simpleGame::Travelers, i::Int) = 2:100

# h√†m t√≠nh ph·∫ßn th∆∞·ªüng khi 1 agent c√≥ s·ªë th·ª© t·ª± i th·ª±c hi·ªán action a
function reward(simpleGame::Travelers, i::Int, a)
      if i == 1
            notI = 2
      else
            notI = 1
      end
      if a[i] == a[notI]
            r = a[i]
      elseif a[i] < a[notI]
            r = a[i] + 2
      else
            r = a[notI] - 1
      end
      return r
end

# h√†m t√≠nh v√† tr·∫£ v·ªÅ 1 list c√°c ph·∫ßn th∆∞·ªüng t∆∞∆°ng ·ª©ng V·ªõi t·ª´ng agent v·ªõi action a
function joint_reward(simpleGame::Travelers, a)
      return [reward(simpleGame, i, a) for i in 1:n_agents(simpleGame)]
end

# ph√¢n ph·ªëi t·ª´ng m·∫£ng trong X v·ªõi nhau
joint(X) = vec(collect(Iterators.product(X...)))
# thay th·∫ø ph·∫ßn t·ª≠ v·ªã tr√≠ i trong œÄ th√†nh œÄi 
joint(œÄ, œÄi, i) = [i == j ? œÄi : œÄj for (j, œÄj) in enumerate(œÄ)]

# h√†m t√≠nh s·ª± "c√≥ l·ª£i" c·ªßa m·ªôt joint policy œÄ
function utility(ùí´::SimpleGame, œÄ, i)
      ùíú, R = ùí´.ùíú, ùí´.R
      # p(a) t√≠nh t√≠ch c·ªßa t·∫•t c·∫£ c√°c x√°c su·∫•t c·ªßa c√°c action trong joint action a
      p(a) = prod(œÄj(aj) for (œÄj, aj) in zip(œÄ, a))
      # t√≠nh t·ªïng m·ªçi (ph·∫ßn th∆∞·ªüng c·ªßa agent s·ªë th·ª© t·ª± i * t√≠ch x√°c su·∫•t) c·ªßa m·ªçi joint action a trong joint action space ùíú
      return sum(R(a)[i] * p(a) for a in joint(ùíú))
end